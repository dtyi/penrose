The ``p3`` module
======================

(test using ``python -m doctest -v examples.txt``)

Using ``sumz``
-------------------

This is an example text file in reStructuredText format.  First import
the ``sumz`` module:

    >>> import numpy as np
    >>> from sumz import *

Now use it:

    >>> SumZ()
    SumZ([0,0,0,0,0])
    >>> _.coords
    0j

    >>> SumZ(1,0,0,0,0)
    SumZ([0,-1,-1,-1,-1])
    >>> _.coords
    (1+0j)

These cyclotomic integers, the ring of the fifth root of unity, are
based on a kind of unit pentagon. Note that currently floating-point
safety isn't guaranteed; hence the isclose().

    >>> SumZ(0,1,0,0,-1)
    SumZ([0,1,0,0,-1])
    >>> np.isclose(_.coords, np.sin(np.pi/180*72)*2j)
    True

The addition of all 5 unit vectors is 0;
    >>> SumZ(1,1,1,1,1)
    SumZ([0,0,0,0,0])

And thus all such 'cycles' are nulled in internal representation.
    >>> SumZ(1,2,3,4,5)
    SumZ([0,1,2,3,4])

Note that instantiation with non-integer coefficients is not allowed.
This is a cyclotomic integer ring, not a field.
    >>> SumZ(0.5,0,0,0,0)
    Traceback (most recent call last):
        ...
    ValueError: Non-integer coefficients!

They behave like complex numbers should; conjugates are reflected across
the real axis.
    >>> SumZ(1,2,3,4,5).conjugate() == SumZ(1,5,4,3,2)
    True

Multiplication is performed using circulant matrices, which are, quote,
> integral kernel of a convolution operator on the cyclic group C_{n}
 - Wikipedia

    >>> SumZ(1,2,3,4,5).matrix
    array([[0, 4, 3, 2, 1],
           [1, 0, 4, 3, 2],
           [2, 1, 0, 4, 3],
           [3, 2, 1, 0, 4],
           [4, 3, 2, 1, 0]])
       
    >>> SumZ(1,2,3,4,5)*SumZ(0,0,-1,-1,0)
    SumZ([0,-2,1,4,2])

They also support multiplication with straight (non-SumZ) complex nums 
but at the moment it's not recommended to mix types like this.
    >>> SumZ(1,2,3,4,5)*np.exp(72j*np.pi/180)
    SumZ([0,-4,-3,-2,-1])
    >>> SumZ(1,2,3,4,5)*SumZ(0,0,-1,-1,0) == SumZ(1,2,3,4,5)*SumZ.tau
    True

Division is defined but not guaranteed to return any values. Use at your
own risk. This is due to the fact that if these cyclotomic integers are
defined over the integers rather than reals, this is a ring, and not a
fully-fledged field. That said, it does work if np.linalg.solve finds
a solution and it's all integers.

    >>> foo = SumZ(0,1,2,3,4)
    >>> bar = SumZ(0,1,1,-1,-2)
    >>> baz = foo*bar
    >>> baz/bar
    SumZ([0,1,2,3,4])
    >>> baz = SumZ(1,1,0,0,0)
    >>> foo/baz
    SumZ([0,3,1,4,2])

SumPol objects always have multiplicative inverses (can divide).
    >>> foo/SumPol(3,2)
    SumZ([0,6,2,3,4])
    >>> SumPol(3,2)/SumPol(5,-1)
    SumPol([0,-2,-2,0,1])



Using ``objmatrix``
-------------------

This is an example text file in reStructuredText format.  First import
``objmatrix`` from the ``p3`` module:

    >>> from objmatrix import *

Now try matrix multiplication (the raison d'etre of ObjMatrix):
    >>> foo = ObjMatrix([[ONE, ZERO],[SumZ([0,1,2,3,4]),SumPol(2,1)]])
    >>> foo @ foo
    ObjMatrix([[SumPol([0,-1,-1,-1,-1]), SumZ([0,0,0,0,0])],
               [SumZ([0,-1,-2,2,6]), SumZ([0,1,2,1,0])]], dtype=object)

The class also vectorizes several other operations that in numpy arrays
work for ordinary numbers but not these objects.
    >>> foo.imag
    ObjMatrix([[ 0.        ,  0.        ],
               [-3.4409548 ,  1.53884177]])
    >>> foo.conj
    ObjMatrix([[SumZ([0,-1,-1,-1,-1]), SumZ([0,0,0,0,0])],
               [SumZ([0,4,3,2,1]), SumZ([0,-1,-1,0,0])]], dtype=object)
    >>> foo*TAU
    ObjMatrix([[SumPol([0,0,-1,-1,0]), SumZ([0,0,0,0,0])],
               [SumZ([0,-2,1,4,2]), SumPol([0,1,0,-1,-1])]], dtype=object)

As a bonus, this class also implements (2x2 at least) matrix inversion:

    >>> foo = ObjMatrix([[1,2],[3,4]])
    >>> np.allclose(foo.inverse.inverse,foo)
    True
    >>> np.allclose(np.identity(2),foo@foo.inverse)
    True
    >>> np.allclose(np.identity(2),foo.inverse@foo)
    True

... and in a way that works with SumZ objects.
    >>> foo = SumZ(0,1,2,3,4)
    >>> baz = SumZ(1,1,0,0,0)
    >>> spam = ObjMatrix([[baz,ZERO],[foo,SumPol(3,2)]])
    >>> spam.inverse
    ObjMatrix([[SumZ([0,-1,0,-1,0]), SumZ([0,0,0,0,0])],
               [SumZ([0,-3,4,-4,3]), SumZ([0,-2,0,-1,-1])]], dtype=object)
    >>> np.array_equal(spam.inverse.inverse, spam)
    True
    >>> spam.inverse @ spam
    ObjMatrix([[SumZ([0,-1,-1,-1,-1]), SumZ([0,0,0,0,0])],
               [SumZ([0,0,0,0,0]), SumZ([0,-1,-1,-1,-1])]], dtype=object)

Just note that if you're not careful, it's entirely possible to provoke
a division error, due to how 2x2 matrix inversion requires division by
the determinant a*d-b*c and the fact that arbitrary SumZ objects are not
guaranteed to have multiplicative inverses.

